<!doctype html>
<html>
<head>
    <title>SBSP</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"
          integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <style>
        tr {
            cursor: pointer;
        }
        /*tr:hover {*/
        /*    background-color: deeppink;*/
        /*}*/
        td:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
<table class="table">
    <thead>
    <th>Company Name</th>
    <th>Position</th>
    <th>Level</th>
    <th>Date Posted</th>
    <th>State</th>
    <th>City</th>
    <th>Industry</th>
    <th>Description</th>
    <th></th>
    </thead>
    <tbody>
    <tr>
        <td> 
            <input class="form-control" id="company-filter" onkeyup="onFiltersKeyUpCompany();"></td>
        <td>
            <input class="form-control" id="position-filter" onkeyup="onFiltersKeyUp();">
        </td>
        <td>
            <select class="form-control" id="level-filter" onchange="onLevelFilter();">
                <option value=""></option>
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
            </select>
        </td>
        <td>
            <input class="form-control" id="date-posted-filter" type="date" onkeyup="onFiltersKeyUpState();">
        </td>
        <td>
             <input class="form-control" id="state-filter" onkeyup="onFiltersKeyUpState();">
        </td>
        <td>
            <input class="form-control" id="city-filter" onkeyup="onFiltersKeyUpCity();">
        </td>
        <td>
                <select class="form-control" id="industry-filter" onchange="onIndustryFilter();">
                <option value=""></option>
                <option value="Solar">Solar</option>
                <option value="Storage">Storage</option>
            </select>
        </td>
        <td>
            <input class="form-control" id="description-filter" onkeyup="onFiltersKeyUpDescription();"></td>    
        </td>
        <td><button class="btn btn-primary" onclick="onClearFilters();">Clear Filters</button></td>
    </tr>
   {{#each data}}
        <tr onclick="onRowClick(event);" data-link="{{lookup this "link"}}">
            <td>{{lookup this "company name"}}</td>
            <td>{{lookup this "position"}}</td>
            <td>{{lookup this "level"}}</td>
            <td>{{lookup this "date posted"}}</td>
            <td>{{lookup this "state"}}</td>
            <td>{{lookup this "city"}}</td>
            <td>{{lookup this "industry"}}</td>
            <td>{{lookup this "description"}}</td>
            <td>&nbsp;</td>
        </tr>
    {{/each}}
    </tbody>
</table>
<script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js"></script>
<script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/qs/6.10.1/qs.min.js"></script>
<script type="text/javascript">
 
    const onFiltersKeyUp = _.debounce(() => {
        const href = window.location.origin + window.location.pathname;
        const value = document.getElementById('position-filter').value;
        const newSearch = Qs.stringify( value ? {
            ...parsedSearch(),
            position: value
        } : removeKey('position'));
        return window.location.replace(href + '?' + newSearch);
    }, 500);

    const onFiltersKeyUpCompany = _.debounce(() => {
        const href = window.location.origin + window.location.pathname;
        const value = document.getElementById('company-filter').value;
        const newSearch = Qs.stringify( value ? {
            ...parsedSearch(),
            company: value
        } : removeKey('company'));
        return window.location.replace(href + '?' + newSearch);
    }, 500);

    const onFiltersKeyUpState = _.debounce(() => {
        const href = window.location.origin + window.location.pathname;
        const value = document.getElementById('state-filter').value;
        const newSearch = Qs.stringify( value ? {
            ...parsedSearch(),
            state: value
        } : removeKey('state'));
        return window.location.replace(href + '?' + newSearch);
    }, 500);

     const onFiltersKeyUpCity = _.debounce(() => {
        const href = window.location.origin + window.location.pathname;
        const value = document.getElementById('city-filter').value;
        const newSearch = Qs.stringify( value ? {
            ...parsedSearch(),
            city: value
        } : removeKey('city'));
        return window.location.replace(href + '?' + newSearch);
    }, 500);

        const onFiltersKeyUpDescription= _.debounce(() => {
        const href = window.location.origin + window.location.pathname;
        const value = document.getElementById('description-filter').value;
        const newSearch = Qs.stringify( value ? {
            ...parsedSearch(),
            description: value
        } : removeKey('description'));
        return window.location.replace(href + '?' + newSearch);
    }, 500);

    function removeKey(key) {
        const parsed = parsedSearch();
        delete parsed[key];
        return parsed;
    }

    function parsedSearch() {
        const search = window.location.search;
        return Qs.parse(search.replace(/^\?/, ''));
    }

    function onLevelFilter() {
        const href = window.location.origin + window.location.pathname;
        const value = document.getElementById('level-filter').value;
        const newSearch = Qs.stringify(value ? {
            ...parsedSearch(),
            level: value
        } : removeKey('level'));
        return window.location.replace(href + '?' + newSearch);
    }

    function onIndustryFilter() {
        const href = window.location.origin + window.location.pathname;
        const value = document.getElementById('industry-filter').value;
        const newSearch = Qs.stringify(value ? {
            ...parsedSearch(),
            industry: value
        } : removeKey('industry'));
        return window.location.replace(href + '?' + newSearch);
    }

    function onRowClick(e) {
        const dataset = e.target.parentNode.dataset;
        if (dataset.link) {
          window.open(dataset.link, '_blank');
        }
    }

    function onClearFilters() {
        const href = window.location.origin + window.location.pathname;
        return window.location.replace(href);
    }

    if (window.location.search) {
        const searchObject = Qs.parse(window.location.search.replace(/^\?/, ''));

         if (searchObject.company) {
            document.getElementById('company-filter').value = searchObject.company;
        }
        if (searchObject.position) {
            document.getElementById('position-filter').value = searchObject.position;
        }
        if (searchObject.state) {
            document.getElementById('state-filter').value = searchObject.state;
        }
        if (searchObject.city) {
            document.getElementById('city-filter').value = searchObject.city;
        }
        if (searchObject.level) {
            document.getElementById('level-filter').value = searchObject.level;
        }
        if (searchObject.industry) {
            document.getElementById('industry-filter').value = searchObject.industry;
        }
        if (searchObject.description) {
            document.getElementById('description-filter').value = searchObject.description;
        }
    }
</script>
</body>
</html>
